1- almost done with GoalAdapter, TaskAdapter and RecyclerViewAdapter.
2- i make a lot of Renaming on layouts and java.
3- i add package called data that have all our database things.
4- remove GoalClass.
5- the adapter for GoalAdapter is to currentGoal, RecyclerViewAdapter is to achieve and missed Goal.
6- remove CurrentAdapter.
----------------------------------------------------------------

============
 some ref: |
============


on display screen:
------------------------------------
on current:current_goals_item)
- current_goal_image ( type)
- current_goal_tv ( goal name)
- current_goal_pers_tv ( precentage)

-------------------------------------
on achive, missed:( card_view_item)
- cardview ( container)
- goal_img ( type)
- goal_textview ( goal name)

-------------------------------------
on task item: (task_list_item)
- checkbox ( completed)
- imageView ( notify on item)
- textViewTitle ( task name)
- textViewShortDesc ( date)

======================================
Editting activity:

--------------------------------------
goal:( activity_goal)
- goal ( goal name)
- radiogroup ( radiogroup)
- radiobutton ( job type)
- radiobutton1 ( housework type)
- radiobutton2 ( education type)
- radiobutton3 ( exercise type)
- radiobutton4 ( social type)
- radiobutton5 ( other type)
- description ( description goal)
- delete_goal ( delete goal button)
- save_goal ( save goal button)

------------------------------------
task:( activity_task)
- edit_tasks ( task name)
- edit_date ( task date )
- edit_notify ( task notify on)
- Spinner ( task Spinner)
- delete_task ( delete task button)
- save_task ( save task button)
- cancel_task ( cancel task button)


=============================================
 some deleted code from RecyclerViewAdapter:|
=============================================


public class RecyclerViewAdapter extends RecyclerView.Adapter<RecyclerViewAdapter.MyViewHolder>{

/**
 * we add a constructor to the RecyclerViewAdapter so that it has a handle to the data that the RecyclerView displays.
 * As our data is in the form of a List of Goal objects
     */

    private Context mContex ;
    private List<GoalClass> mData;


    public RecyclerViewAdapter(Context mContex,     List<GoalClass> mData) {
        this.mContex = mContex;
        this.mData = mData;
    }
/*
 This method is called when the custom ViewHolder needs to be initialized.
 We specify the layout that each item of the RecyclerView should use.
  This is done by inflating the layout using LayoutInflater,
  passing the output to the constructor of the custom ViewHolder.
 */
    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {

        View view;
        LayoutInflater mInflater =LayoutInflater.from(mContex);
        view = mInflater.inflate(R.layout.card_view_item, parent,false);
        return new MyViewHolder(view);
    }
/*
  here's where we have to set the values of the name of the goal and photo fields of the CardView.
 */
    @Override
    public void onBindViewHolder(MyViewHolder holder, int position) {
        holder.tv_goal_title.setText(mData.get(position).getTitle());
        holder.img_goal_thumbnail.setImageResource(mData.get(position).getThumbnail());

        //set click listener
        holder.cardView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                Intent intent = new Intent(mContex,DisplayTaskScreen.class);

                // start the activity
                mContex.startActivity(intent);

            }
        });
    }
/*
*This should return the number of items present in the data. As our data is in the form of a List,
* we only need to call the size method on the List object
 */
    @Override
    public int getItemCount() {

        return mData.size();
    }

   /**
     * we already defined the XML layout for a CardView that represents a person. We are going to reuse that layout now.
    * Inside the constructor of our custom ViewHolder, initialize the views that belong to the items of our RecyclerVie.
     */
    public static class MyViewHolder extends RecyclerView.ViewHolder {

        TextView tv_goal_title;
        ImageView img_goal_thumbnail;
        CardView cardView;

        public MyViewHolder(View itemView) {
            super(itemView);
            tv_goal_title = (TextView)itemView.findViewById(R.id.goal_textview);
            img_goal_thumbnail=(ImageView)itemView.findViewById(R.id.goal_img);
            cardView =(CardView) itemView.findViewById(R.id.cardview);

        }
    }
}
================================
the deleted code from GoalClass|
================================
package com.example.al_kahtani.sygoal;

public class GoalClass {
    /**
     * Default title name of the goal
     */
    private String Title;
    /**
     * Default photo of the goal
     */
    private int Thumbnail;

    private String mCurrent_goal_name;
    private String mRate;
    private static final int NO_IMAGE_PROVIDED = -1;

    /**
     * Create a new goal object.
     *
     * @param Current_goal_name
     * @param Rate
     */
    public GoalClass(String Current_goal_name, String Rate) {
        mCurrent_goal_name = Current_goal_name;
        mRate = Rate;
    }

    /**
     * @param title     is a name of goal
     * @param thumbnail is a photo of goal
     */
    public GoalClass(String title, int thumbnail) {
        Title = title;
        Thumbnail = thumbnail;
    }

    /*
     * Get the Default title name of the goal.
     */
    public String getTitle() {
        return Title;
    }

    /*
     * Get the Default photo of the goal.
     */
    public int getThumbnail() {
        return Thumbnail;
    }

    /*
     * Set the Default title name of the goal.
     */
    public void setTitle(String title) {
        Title = title;
    }

    /*
     * Set the Default photo of the goal.
     */
    public void setThumbnail(int thumbnail) {
        Thumbnail = thumbnail;
    }

    public String getRate() {
        return mRate;
    }

    public void setRate(String rate) {
        mRate = rate;
    }


    private int mImageResourceId = NO_IMAGE_PROVIDED;

    public String getCurrent_goal_name() {
        return mCurrent_goal_name;
    }

    public void setCurrent_goal_name(String current_goal_name) {
        mCurrent_goal_name = current_goal_name;
    }


    public boolean hasImage() {
        return mImageResourceId != NO_IMAGE_PROVIDED;
    }

    public int getImageResourceId() {
        return mImageResourceId;
    }

}

======================================
the deleted code from CurrentAdapter:|
======================================
package com.example.al_kahtani.sygoal;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.ArrayList;

public class CurrentAdapter extends ArrayAdapter<GoalClass> {


    public CurrentAdapter(Context context, ArrayList<GoalClass> titles) {
        super(context, 0, titles);
    }


    @Override
    public View getView(int position, View convertView, ViewGroup parent){
        View listItemView = convertView;
        if (listItemView == null) {
            listItemView = LayoutInflater.from(getContext()).inflate(
                    R.layout.currrnt_goals_item, parent, false);
        }
        GoalClass currentWord = getItem(position);
        TextView current_goal = listItemView.findViewById(R.id.display_recycle_goal_name);
        current_goal.setText(currentWord.getCurrent_goal_name());
        TextView current_goal_Rate =  listItemView.findViewById(R.id.display_goal_percentage);
        current_goal_Rate.setText(currentWord.getRate());
        ImageView imageView = listItemView.findViewById(R.id.display_recycle_goal_type);

        if (currentWord.hasImage()) {
            imageView.setImageResource(currentWord.getImageResourceId());

            imageView.setVisibility(View.VISIBLE);
        } else {

            imageView.setVisibility(View.GONE);
        }

        return listItemView;
    }

}

-------------------------------------------------
===============================================
-------------------------------------------------
AchievementFragment:

package com.example.al_kahtani.sygoal.fragments;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupMenu;

import com.example.al_kahtani.sygoal.AchieveAndMissedAdapter;
import com.example.al_kahtani.sygoal.DisplayTaskScreen;
import com.example.al_kahtani.sygoal.GoalActivity;
import com.example.al_kahtani.sygoal.R;
import com.example.al_kahtani.sygoal.data.GoalContract;
import com.example.al_kahtani.sygoal.data.HelperClass;

import java.util.Locale;

public class Achievement_fragment extends Fragment {

    ListView achieveListView;
    ImageView emptyView;

    String updateGoal;
    String updateTask = "0";
    int selectedItem;
    int countedData = 0;
    int goalActivityNumber;

    HelperClass helper;
    AchieveAndMissedAdapter adapter;
    SQLiteDatabase db;

    public Achievement_fragment() {
        // Required emptyView public constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        loadLocale();//load languge setting
        final View view = inflater.inflate(R.layout.achievements_fragment, container, false);

        // Find the {@link ListView} object in the view hierarchy of the {@link achievements_fragment}.
        // There should be a {@link ListView} with the view ID called list_view_achievement.
        achieveListView = view.findViewById(R.id.list_view_achievement);
        emptyView = view.findViewById(R.id.empty_view);
        return view;
    }

    @Override
    public void onViewCreated(final View rootView, @Nullable Bundle savedInstanceState) {
        //instantiate object from HelperClass to access to it method
        helper = new HelperClass(rootView.getContext());

        try {
            //open Database to read info from it
            db = helper.getReadableDatabase();

            String[] projection = {GoalContract._ID,
                    GoalContract.Goal_Name,
                    GoalContract.Goal_Type,
                    GoalContract.Goal_Activity,
                    GoalContract.Goal_Percentage,
                    GoalContract.Goal_MaxDate,
                    GoalContract.Goal_Description};

            final Cursor mcursor = db.query(GoalContract.TABLE_NAME,
                    projection,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null);

            while (mcursor.moveToNext()) {
                countedData = countedData + 1;
            }
            mcursor.close();

            if (countedData == 0) {
                final Cursor cursor = db.rawQuery(" SELECT * FROM " + GoalContract.TABLE_NAME, null);

                adapter = new AchieveAndMissedAdapter(rootView.getContext(), cursor);
                achieveListView.setEmptyView(emptyView);

                achieveListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        Intent i = new Intent(view.getContext(), DisplayTaskScreen.class);
                        i.putExtra("goalId", id);
                        startActivity(i);
                    }
                });
                achieveListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                    @Override
                    public boolean onItemLongClick(AdapterView<?> parent, final View view, int position, final long id) {

                        final PopupMenu popupMenu = new PopupMenu(rootView.getContext(), view);
                        popupMenu.inflate(R.menu.pop_up_menu);
                        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                            @Override
                            public boolean onMenuItemClick(MenuItem item) {
                                selectedItem = item.getItemId();
                                if (selectedItem == R.id.update) {
                                    updateGoal = "1";
                                    updateTask = "1";
                                    goalActivityNumber = 3;

                                    Intent intent = new Intent(rootView.getContext(), GoalActivity.class);
                                    intent.putExtra("goalId", id);
                                    intent.putExtra("updateGoal", updateGoal);
                                    intent.putExtra("goalActivity", goalActivityNumber);
                                    startActivity(intent);

                                } else if (selectedItem == R.id.delete) {
                                    helper.deleteGoal(id);
                                    Cursor cursor1 = updateUi();
                                    adapter = new AchieveAndMissedAdapter(getContext(), cursor1);
                                    achieveListView.setAdapter(adapter);

                                }
                                return true;
                            }
                        });
                        popupMenu.show();
                        return true;
                    }
                });
                achieveListView.setAdapter(adapter);
            }
            /**
             * --------------------------------------------------------------------
             * */
            else {

                String myQuery = " SELECT * FROM " + GoalContract.TABLE_NAME
                        + " WHERE " + GoalContract.Goal_Activity + " = " + 3;
                //+ "WHERE (SELECT" + " MAX(t." + TaskContract.Task_Date + ") < " + "date('now')"
                //+ "OR MAX(t." + TaskContract.Task_Date + ") = " + "date('now'))";

                final Cursor cursor = db.rawQuery(myQuery, null);

                adapter = new AchieveAndMissedAdapter(rootView.getContext(), cursor);
                achieveListView.setEmptyView(emptyView);

                achieveListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        Intent i = new Intent(view.getContext(), DisplayTaskScreen.class);
                        i.putExtra("goalId", id);
                        startActivity(i);
                    }
                });
                achieveListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                    @Override
                    public boolean onItemLongClick(AdapterView<?> parent, final View view, int position, final long id) {

                        final PopupMenu popupMenu = new PopupMenu(rootView.getContext(), view);
                        popupMenu.inflate(R.menu.pop_up_menu);
                        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                            @Override
                            public boolean onMenuItemClick(MenuItem item) {
                                selectedItem = item.getItemId();
                                if (selectedItem == R.id.update) {
                                    updateGoal = "1";
                                    updateTask = "1";
                                    goalActivityNumber = 3;

                                    Intent intent = new Intent(rootView.getContext(), GoalActivity.class);
                                    intent.putExtra("goalId", id);
                                    intent.putExtra("updateGoal", updateGoal);
                                    intent.putExtra("goalActivity", goalActivityNumber);
                                    startActivity(intent);

                                } else if (selectedItem == R.id.delete) {
                                    helper.deleteGoal(id);
                                    Cursor cursor1 = updateUi();
                                    adapter = new AchieveAndMissedAdapter(getContext(), cursor1);
                                    achieveListView.setAdapter(adapter);

                                }
                                return true;
                            }
                        });
                        popupMenu.show();
                        return true;
                    }
                });
                achieveListView.setAdapter(adapter);
            }
        } finally {
            db.close();
        }
    }


    // languge setting
    public void setLocale(String lang) {
        Locale locale = new Locale(lang);
        Locale.setDefault(locale);
        Configuration configuration = new Configuration();
        configuration.locale = locale;
        getActivity().getResources().updateConfiguration(configuration, getActivity().getResources().getDisplayMetrics());
        SharedPreferences.Editor editor = getActivity().getSharedPreferences("SettingActivity", Context.MODE_PRIVATE).edit();
        editor.putString("My_Lang", lang);
        editor.apply();

    }

    public void loadLocale() {
        SharedPreferences pref = getActivity().getSharedPreferences("SettingActivity", Activity.MODE_PRIVATE);
        String language = pref.getString("My_Lang", "");
        setLocale(language);
    }

    private Cursor updateUi() {

        db = helper.getReadableDatabase();

        String[] projection = {GoalContract._ID,
                GoalContract.Goal_Name,
                GoalContract.Goal_Type,
                GoalContract.Goal_Activity,
                GoalContract.Goal_Percentage,
                GoalContract.Goal_MaxDate,
                GoalContract.Goal_Description};

        final Cursor mcursor = db.query(GoalContract.TABLE_NAME,
                projection,
                GoalContract.Goal_Activity + "=?",
                new String[]{String.valueOf(3)},
                null,
                null,
                null,
                null);

        return mcursor;
    }
}
___________________________________________
MissedFragment:

package com.example.al_kahtani.sygoal.fragments;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupMenu;

import com.example.al_kahtani.sygoal.AchieveAndMissedAdapter;
import com.example.al_kahtani.sygoal.DisplayTaskScreen;
import com.example.al_kahtani.sygoal.GoalActivity;
import com.example.al_kahtani.sygoal.R;
import com.example.al_kahtani.sygoal.data.GoalContract;
import com.example.al_kahtani.sygoal.data.HelperClass;

import java.util.Locale;

public class MissedGoalsFragment extends Fragment {

    ListView missedListView;
    ImageView emptyView;

    String updateGoal;
    String updateTask = "0";
    int selectedItem;
    int countedData = 0;
    int goalActivityNumber;

    HelperClass helper;
    AchieveAndMissedAdapter adapter;
    SQLiteDatabase db;

    public MissedGoalsFragment() {
        // Required emptyView public constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        loadLocale();//load languge setting
        final View view = inflater.inflate(R.layout.missed_goals_fragments, container, false);

        // Find the {@link RecyclerView} object in the view hierarchy of the {@link achievements_fragment}.
        // There should be a {@link RecyclerView} with the view ID called recyclerViewAchi.
        missedListView = view.findViewById(R.id.list_view_missed);
        emptyView = view.findViewById(R.id.empty_view);
        return view;
    }

    @Override
    public void onViewCreated(final View rootView, @Nullable Bundle savedInstanceState) {

        helper = new HelperClass(rootView.getContext());

        try {
            //open Database to read info from it
            db = helper.getReadableDatabase();

            String[] projection = {GoalContract._ID,
                    GoalContract.Goal_Name,
                    GoalContract.Goal_Type,
                    GoalContract.Goal_Activity,
                    GoalContract.Goal_Percentage,
                    GoalContract.Goal_MaxDate,
                    GoalContract.Goal_Description};

            final Cursor mcursor = db.query(GoalContract.TABLE_NAME,
                    projection,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null);

            while (mcursor.moveToNext()) {
                countedData = countedData + 1;
            }
            mcursor.close();

            db = helper.getReadableDatabase();
            if (countedData == 0) {
                final Cursor cursor = db.rawQuery(" Select * FROM " + GoalContract.TABLE_NAME, null);

                adapter = new AchieveAndMissedAdapter(rootView.getContext(), cursor);
                missedListView.setEmptyView(emptyView);

                missedListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        Intent i = new Intent(view.getContext(), DisplayTaskScreen.class);
                        i.putExtra("goalId", id);
                        startActivity(i);
                    }
                });
                missedListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                    @Override
                    public boolean onItemLongClick(AdapterView<?> parent, final View view, int position, final long id) {

                        final PopupMenu popupMenu = new PopupMenu(rootView.getContext(), view);
                        popupMenu.inflate(R.menu.pop_up_menu);
                        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                            @Override
                            public boolean onMenuItemClick(MenuItem item) {
                                selectedItem = item.getItemId();
                                if (selectedItem == R.id.update) {
                                    updateGoal = "1";
                                    updateTask = "1";
                                    goalActivityNumber = 2;

                                    Intent intent = new Intent(rootView.getContext(), GoalActivity.class);
                                    intent.putExtra("goalId", id);
                                    intent.putExtra("updateGoal", updateGoal);
                                    intent.putExtra("goalActivity", goalActivityNumber);
                                    startActivity(intent);

                                } else if (selectedItem == R.id.delete) {
                                    helper.deleteGoal(id);
                                    Cursor cursor1 = updateUi();
                                    adapter = new AchieveAndMissedAdapter(getContext(), cursor1);
                                    missedListView.setAdapter(adapter);

                                }
                                return true;
                            }
                        });
                        popupMenu.show();
                        return true;
                    }
                });
                missedListView.setAdapter(adapter);
            }
            /**
             * --------------------------------------------------------------------
             * */
            else {

                final Cursor cursor = db.rawQuery(" Select * FROM " + GoalContract.TABLE_NAME + " WHERE "
                        + GoalContract.Goal_Activity + " = " + 2, null);

                adapter = new AchieveAndMissedAdapter(rootView.getContext(), cursor);
                missedListView.setEmptyView(emptyView);

                missedListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        Intent i = new Intent(view.getContext(), DisplayTaskScreen.class);
                        i.putExtra("goalId", id);
                        startActivity(i);
                    }
                });
                missedListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                    @Override
                    public boolean onItemLongClick(AdapterView<?> parent, final View view, int position, final long id) {

                        final PopupMenu popupMenu = new PopupMenu(rootView.getContext(), view);
                        popupMenu.inflate(R.menu.pop_up_menu);
                        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                            @Override
                            public boolean onMenuItemClick(MenuItem item) {
                                selectedItem = item.getItemId();
                                if (selectedItem == R.id.update) {
                                    updateGoal = "1";
                                    updateTask = "1";
                                    goalActivityNumber = 2;

                                    Intent intent = new Intent(rootView.getContext(), GoalActivity.class);
                                    intent.putExtra("goalId", id);
                                    intent.putExtra("updateGoal", updateGoal);
                                    intent.putExtra("goalActivity", goalActivityNumber);
                                    startActivity(intent);

                                } else if (selectedItem == R.id.delete) {
                                    helper.deleteGoal(id);
                                    Cursor cursor1 = updateUi();
                                    adapter = new AchieveAndMissedAdapter(getContext(), cursor1);
                                    missedListView.setAdapter(adapter);

                                }
                                return true;
                            }
                        });
                        popupMenu.show();
                        return true;
                    }
                });
                missedListView.setAdapter(adapter);
            }
        } finally {
            db.close();
        }
    }

    // languge setting
    public void setLocale(String lang) {
        Locale locale = new Locale(lang);
        Locale.setDefault(locale);
        Configuration configuration = new Configuration();
        configuration.locale = locale;
        getActivity().getResources().updateConfiguration(configuration, getActivity().getResources().getDisplayMetrics());
        SharedPreferences.Editor editor = getActivity().getSharedPreferences("SettingActivity", Context.MODE_PRIVATE).edit();
        editor.putString("My_Lang", lang);
        editor.apply();

    }

    public void loadLocale() {
        SharedPreferences pref = getActivity().getSharedPreferences("SettingActivity", Activity.MODE_PRIVATE);
        String language = pref.getString("My_Lang", "");
        setLocale(language);
    }

    private Cursor updateUi() {

        db = helper.getReadableDatabase();

        String[] projection = {GoalContract._ID,
                GoalContract.Goal_Name,
                GoalContract.Goal_Type,
                GoalContract.Goal_Activity,
                GoalContract.Goal_Percentage,
                GoalContract.Goal_MaxDate,
                GoalContract.Goal_Description};

        final Cursor mcursor = db.query(GoalContract.TABLE_NAME,
                projection,
                GoalContract.Goal_Activity + "=?",
                new String[]{String.valueOf(2)},
                null,
                null,
                null,
                null);

        return mcursor;
    }
}
____________________________________________________
DisplayTaskActivity

package com.example.al_kahtani.sygoal;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.PopupMenu;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.example.al_kahtani.sygoal.classes.SharedPref;
import com.example.al_kahtani.sygoal.data.GoalContract;
import com.example.al_kahtani.sygoal.data.HelperClass;
import com.example.al_kahtani.sygoal.data.TaskAdapter;
import com.example.al_kahtani.sygoal.data.TaskContract;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

public class DisplayTaskScreen extends AppCompatActivity {

    FloatingActionButton fab;
    ListView taskListView;
    TextView goalName;
    TextView taskPercentage;
    ProgressBar taskProgressBar;
    ProgressBar emptyTaskProgressBar;

    ArrayList<TaskContract> item;
    long goalId;
    String updateTask;
    int completeTaskCount = 0;
    int taskCount = 0;
    int newCompleteTaskCount = 0;
    int newTaskCount = 0;
    double newMPercentage = 00;
    String newBeginDate = "0000-1-1";
    String newMaxDate;
    String newEndDate;
    String newNextDate;
    String newCurrentDate;
    String beginDate = "0000-1-1";
    String maxDate;
    String endDate;
    String nextDate;
    String currentDate;
    String mGoalName = "";
    int goalActivityNumber;
    int completeState;
    double mPercentage = 00;


    SharedPref sharedpref;
    HelperClass helper;
    TaskAdapter adapter;
    SQLiteDatabase db;
    Calendar calendar;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        sharedpref = new SharedPref(this);//load night mode setting
        if (sharedpref.loadNightModeState() == true) {
            setTheme(R.style.darktheme);
        } else {
            setTheme(R.style.AppTheme);
        }
        loadLocale();//load languge setting
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_display_task_screen);

        fab = findViewById(R.id.task_fab);
        taskListView = findViewById(R.id.task_list_view);
        goalName = findViewById(R.id.taskactivity_goal_name);
        taskPercentage = findViewById(R.id.taskactivity_percentage);
        taskProgressBar = findViewById(R.id.taskactivity_progress);
        emptyTaskProgressBar = findViewById(R.id.empty_taskactivity_progress);

        Intent intent = getIntent();
        goalId = intent.getLongExtra("goalId", goalId);
        helper = new HelperClass(this);

        try {
            //open Database to read info from it
            db = helper.getWritableDatabase();

            String TaskAndGoalQuery = "SELECT g." + GoalContract.Goal_Name + ", "
                    + "t." + TaskContract.Task_Name + ", "
                    + "t." + TaskContract.Task_Date + ", "
                    + "t." + TaskContract.Task_Notify_On + ", "
                    + "t." + TaskContract.Task_Alarm + ", "
                    + "t." + TaskContract.Task_NotifyState + ", "
                    + "t." + TaskContract.Task_Goal_Id + ", "
                    + "t." + TaskContract.Task_Id + ", "
                    + "t." + TaskContract.Task_CheckBox_Completed
                    + " FROM " + TaskContract.TABLE_NAME + " t "
                    + " JOIN " + GoalContract.TABLE_NAME + " g "
                    + " ON t." + TaskContract.Task_Goal_Id + " = " + goalId
                    + " Where g." + GoalContract._ID + " = t." + TaskContract.Task_Goal_Id
                    + " ORDER BY t." + TaskContract.Task_Date + ", t." + TaskContract.Task_Notify_On + " ASC ";

            final Cursor cursor = db.rawQuery(TaskAndGoalQuery, null);
            if (cursor.getCount() != 0) {
                try {
                    while (cursor.moveToNext()) {
                        int c = cursor.getColumnIndex(TaskContract.Task_CheckBox_Completed);
                        completeState = cursor.getInt(c);

                        taskCount = taskCount + 1;
                        if (completeState == 1) {
                            completeTaskCount = completeTaskCount + 1;
                        }
                        nextDate = cursor.getString(cursor.getColumnIndex(TaskContract.Task_Date));
                        //ToDo: ========================mNotifyState=========================
                        int mNotifyState = cursor.getInt(cursor.getColumnIndex(TaskContract.Task_NotifyState));
                        //make an update for it later.. when alarm is off => notify state is 0 else notify state is 1

                        try {
                            SimpleDateFormat format = new SimpleDateFormat("yyyy-mm-dd", Locale.US);
                            Date date1 = format.parse(beginDate);
                            Date date2 = format.parse(nextDate);

                            if (date1.compareTo(date2) > 0) {
                                maxDate = beginDate;
                            } else if (date1.compareTo(date2) < 0) {
                                maxDate = nextDate;
                            } else if (date1.compareTo(date2) == 0) {
                                maxDate = nextDate;
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        } finally {
                            db.close();
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    db = helper.getReadableDatabase();
                    Cursor cursor1 = db.query(GoalContract.TABLE_NAME,
                            new String[]{GoalContract._ID,
                                    GoalContract.Goal_Name},

                            GoalContract._ID + "=?",
                            new String[]{String.valueOf(goalId)},
                            null,
                            null,
                            null,
                            null);

                    if (cursor1 != null)
                        cursor1.moveToFirst();
                    mGoalName = cursor1.getString(cursor1.getColumnIndex(GoalContract.Goal_Name));
                    cursor1.close();
                } finally {
                    db.close();
                }

                mPercentage = Math.floor((completeTaskCount * 100) / taskCount);

                taskPercentage.setText((int) mPercentage + "%");
                taskProgressBar.setProgress((int) mPercentage);
                goalName.setText(mGoalName);

                Calendar calendar = Calendar.getInstance();
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                int month = calendar.get(Calendar.MONTH);
                int year = calendar.get(Calendar.YEAR);
                month = month + 1;

                currentDate = year + "-" + month + "-" + day;

                try {
                    endDate = maxDate;
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-mm-dd", Locale.US);
                    Date date1 = format.parse(endDate);
                    Date date2 = format.parse(currentDate);

                    if (date1.compareTo(date2) > 0) {
                        if (completeTaskCount < taskCount) {
                            goalActivityNumber = 1;
                        } else if (completeTaskCount == taskCount) {
                            goalActivityNumber = 3;
                        }
                    } else if (date1.compareTo(date2) < 0) {
                        if (completeTaskCount < taskCount) {
                            goalActivityNumber = 2;
                        } else if (completeTaskCount == taskCount) {
                            goalActivityNumber = 3;
                        }
                    } else if (date1.compareTo(date2) == 0) {
                        if (completeTaskCount < taskCount) {
                            goalActivityNumber = 1;
                        } else if (completeTaskCount == taskCount) {
                            goalActivityNumber = 3;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                helper.updateGoal(goalId, maxDate, mPercentage, goalActivityNumber);
            } else{
                try {
                    db = helper.getReadableDatabase();
                    Cursor cursor1 = db.query(GoalContract.TABLE_NAME,
                            new String[]{GoalContract._ID,
                                    GoalContract.Goal_Name},

                            GoalContract._ID + "=?",
                            new String[]{String.valueOf(goalId)},
                            null,
                            null,
                            null,
                            null);

                    if (cursor1 != null)
                        cursor1.moveToFirst();
                    mGoalName = cursor1.getString(cursor1.getColumnIndex(GoalContract.Goal_Name));
                    cursor1.close();
                } finally {
                    db.close();
                }

                mPercentage = 00;

                taskPercentage.setText((int) mPercentage + "%");
                taskProgressBar.setProgress((int) mPercentage);
                goalName.setText(mGoalName);
            }

            adapter = new TaskAdapter(this, cursor);


            fab.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent = new Intent(DisplayTaskScreen.this, TaskActivity.class);
                    intent.putExtra("goalId", goalId);
                    updateTask = "0";
                    intent.putExtra("updateTask", updateTask);
                    startActivity(intent);
                }
            });

            taskListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, final View view, int position, final long id) {
                    final PopupMenu popupMenu = new PopupMenu(DisplayTaskScreen.this, view);
                    popupMenu.inflate(R.menu.pop_up_menu);
                    popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                        @Override
                        public boolean onMenuItemClick(MenuItem item) {
                            int selectedItem = item.getItemId();
                            if (selectedItem == R.id.update) {
                                updateTask = "1";
                                Intent intent = new Intent(DisplayTaskScreen.this, TaskActivity.class);
                                intent.putExtra("taskId", id);
                                intent.putExtra("updateTask", updateTask);
                                startActivity(intent);

                            } else if (selectedItem == R.id.delete) {
                                helper.deleteTask(id);
                                Cursor cursor = updateUi();


                                while (cursor.moveToNext()) {
                                    int c = cursor.getColumnIndex(TaskContract.Task_CheckBox_Completed);
                                    completeState = cursor.getInt(c);

                                    newTaskCount = newTaskCount + 1;
                                    if (completeState == 1) {
                                        newCompleteTaskCount = newCompleteTaskCount + 1;
                                    }

                                    newNextDate = cursor.getString(cursor.getColumnIndex(TaskContract.Task_Date));
                                    try {
                                        SimpleDateFormat format = new SimpleDateFormat("yyyy-mm-dd", Locale.US);
                                        Date date1 = format.parse(newBeginDate);
                                        Date date2 = format.parse(newNextDate);

                                        if (date1.compareTo(date2) > 0) {
                                            newMaxDate = newBeginDate;
                                        } else if (date1.compareTo(date2) < 0) {
                                            newMaxDate = newNextDate;
                                        } else if (date1.compareTo(date2) == 0) {
                                            newMaxDate = newNextDate;
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }

                                newMPercentage = Math.floor((newCompleteTaskCount * 100) / newTaskCount);

                                taskPercentage.setText((int) newMPercentage + "%");
                                taskProgressBar.setProgress((int) newMPercentage);


                                Calendar calendar = Calendar.getInstance();
                                int day = calendar.get(Calendar.DAY_OF_MONTH);
                                int month = calendar.get(Calendar.MONTH);
                                int year = calendar.get(Calendar.YEAR);
                                month = month + 1;

                                newCurrentDate = year + "-" + month + "-" + day;

                                try {
                                    newEndDate = newMaxDate;
                                    SimpleDateFormat format = new SimpleDateFormat("yyyy-mm-dd", Locale.US);
                                    Date date1 = format.parse(newEndDate);
                                    Date date2 = format.parse(newCurrentDate);

                                    if (date1.compareTo(date2) > 0) {
                                        if (newCompleteTaskCount < newTaskCount) {
                                            goalActivityNumber = 1;
                                        } else if (newCompleteTaskCount == newTaskCount) {
                                            goalActivityNumber = 3;
                                        }
                                    } else if (date1.compareTo(date2) < 0) {
                                        if (newCompleteTaskCount < newTaskCount) {
                                            goalActivityNumber = 2;
                                        } else if (newCompleteTaskCount == newTaskCount) {
                                            goalActivityNumber = 3;
                                        }
                                    } else if (date1.compareTo(date2) == 0) {
                                        if (newCompleteTaskCount < newTaskCount) {
                                            goalActivityNumber = 1;
                                        } else if (newCompleteTaskCount == newTaskCount) {
                                            goalActivityNumber = 3;
                                        }
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                adapter = new TaskAdapter(DisplayTaskScreen.this, cursor);
                                taskListView.setAdapter(adapter);

                                helper.updateGoal(goalId, newMaxDate, newMPercentage, goalActivityNumber);
                            }
                            return true;
                        }
                    });
                    popupMenu.show();
                }
            });
            taskListView.setAdapter(adapter);
        } finally {
            db.close();
        }
        Animation anim_bottom_to_top = AnimationUtils.loadAnimation(this, R.anim.anim_bottom_to_top);
        Animation anim_left_to_right = AnimationUtils.loadAnimation(this, R.anim.anim_left_to_right);
        Animation anim_top_to_bottom = AnimationUtils.loadAnimation(this, R.anim.anim_top_to_bottom);

        taskListView.setAnimation(anim_bottom_to_top);
        emptyTaskProgressBar.setAnimation(anim_left_to_right);
        taskProgressBar.setAnimation(anim_left_to_right);
        taskPercentage.setAnimation(anim_left_to_right);
        goalName.setAnimation(anim_top_to_bottom);
    }

    // languge setting
    public void setLocale(String lang) {
        Locale locale = new Locale(lang);
        Locale.setDefault(locale);
        Configuration configuration = new Configuration();
        configuration.locale = locale;
        getBaseContext().getResources().updateConfiguration(configuration, getBaseContext().getResources().getDisplayMetrics());
        SharedPreferences.Editor editor = getSharedPreferences("SettingActivity", Context.MODE_PRIVATE).edit();
        editor.putString("My_Lang", lang);
        editor.apply();

    }

    public void loadLocale() {
        SharedPreferences pref = getSharedPreferences("SettingActivity", Activity.MODE_PRIVATE);
        String language = pref.getString("My_Lang", "");
        setLocale(language);
    }

    @Override
    public void onBackPressed() {
        Intent intent = new Intent(DisplayTaskScreen.this, BottomNavigationViewActivity.class);
        intent.putExtra("goalId", goalId);
        startActivity(intent);
    }

    private Cursor updateUi() {

        db = helper.getReadableDatabase();

        String TaskAndGoalQuery = "SELECT g." + GoalContract.Goal_Name + ", "
                + "t." + TaskContract.Task_Name + ", "
                + "t." + TaskContract.Task_Date + ", "
                + "t." + TaskContract.Task_Notify_On + ", "
                + "t." + TaskContract.Task_Alarm + ", "
                + "t." + TaskContract.Task_NotifyState + ", "
                + "t." + TaskContract.Task_Goal_Id + ", "
                + "t." + TaskContract.Task_Id + ", "
                + "t." + TaskContract.Task_CheckBox_Completed
                + " FROM " + TaskContract.TABLE_NAME + " t "
                + " JOIN " + GoalContract.TABLE_NAME + " g "
                + " ON t." + TaskContract.Task_Goal_Id + " = " + goalId
                + " Where g." + GoalContract._ID + " = t." + TaskContract.Task_Goal_Id
                + " ORDER BY t." + TaskContract.Task_Date + ", t." + TaskContract.Task_Notify_On + " ASC ";

        Cursor cursor = db.rawQuery(TaskAndGoalQuery, null);

        return cursor;
    }
}

